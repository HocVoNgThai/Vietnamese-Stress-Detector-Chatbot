import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification
from underthesea import word_tokenize
import re
import torch

load_dotenv()
try:
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
except AttributeError:
    st.error("L·ªói: Vui l√≤ng cung c·∫•p GEMINI_API_KEY trong file .env")
    st.stop()

LABEL_MAP = {
    "LABEL_0": "B√¨nh th∆∞·ªùng",
    "LABEL_1": "Lo l·∫Øng",
    "LABEL_2": "B·ª±c b·ªôi",
    "LABEL_3": "Th·∫•t v·ªçng",
    "LABEL_4": "Bu·ªìn/C√¥ ƒë∆°n",
    "LABEL_5": "M·ªát m·ªèi/Nghi ng·ªù b·∫£n th√¢n",
    "LABEL_6": "Tuy·ªát v·ªçng"
}
SEVERITY_LEVELS = {
    "B√¨nh th∆∞·ªùng": 0,
    "Lo l·∫Øng": 1.5,
    "B·ª±c b·ªôi": 1.5,
    "Th·∫•t v·ªçng": 2.5,
    "Bu·ªìn/C√¥ ƒë∆°n": 2.5,
    "M·ªát m·ªèi/Nghi ng·ªù b·∫£n th√¢n": 3.5,
    "Tuy·ªát v·ªçng": 4.0
}
KEYWORD_BOOSTS = {
    "v√¥ nghƒ©a": 1.0,
    "kh√¥ng mu·ªën s·ªëng": 3.0,
    "mu·ªën ch·∫øt": 3.0,
    "h·∫øt hy v·ªçng": 2.0,
    "m·ªát m·ªèi qu√°": 1.5,
    "√°p l·ª±c": 1.0,
    "c√¥ ƒë∆°n": 1.5
}
try:
    tokenizer = AutoTokenizer.from_pretrained("../PhoBERT_emotion_classifier")
    model = AutoModelForSequenceClassification.from_pretrained("../PhoBERT_emotion_classifier")
    classifier = pipeline(
        "text-classification",
        model=model,
        tokenizer=tokenizer,
        device=0 if torch.cuda.is_available() else -1,
        max_length=128,
        truncation=True
    )
except Exception as e:
    st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh PhoBERT: {str(e)}. Vui l√≤ng ki·ªÉm tra th∆∞ m·ª•c phobert_emotion_classifier.")
    classifier = None

def clean_text(text):

    text = re.sub(r'[^\w\s]', '', text.lower().strip())
    text = word_tokenize(text, format="text")
    return text

def analyze_emotion(text):
    if not classifier:
        return "Kh√¥ng th·ªÉ ph√¢n t√≠ch"
    cleaned = clean_text(text)
    with torch.no_grad():
        result = classifier(cleaned)
    return LABEL_MAP.get(result[0]['label'], "Kh√¥ng x√°c ƒë·ªãnh")


RED_FLAG_KEYWORDS = ["t·ª± t·ª≠", "t·ª± s√°t", "ch·∫øt", "k·∫øt th√∫c", "ch·∫•m d·ª©t", "kh√¥ng mu·ªën s·ªëng", "t·∫°m bi·ªát", "kh√¥ng thi·∫øt s·ªëng", "v·ªÅ tr·ªùi"]

#C√≥ th·ªÉ th√™m c√°c th√¥ng tin li√™n h·ªá m√† b·∫°n mu·ªën v√†o ƒë√¢y. V√≠ d·ª• th√¥ng tin c·ªßa m·ªôt b√°c sƒ© t√¢m l√Ω.
EMERGENCY_MESSAGE = """
C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. M√¨nh nh·∫≠n th·∫•y b·∫°n ƒëang tr·∫£i qua nh·ªØng c·∫£m x√∫c r·∫•t n·∫∑ng n·ªÅ. 
ƒêi·ªÅu quan tr·ªçng nh·∫•t l√∫c n√†y l√† b·∫°n nh·∫≠n ƒë∆∞·ª£c s·ª± gi√∫p ƒë·ª° ngay l·∫≠p t·ª©c t·ª´ nh·ªØng ng∆∞·ªùi c√≥ chuy√™n m√¥n. 

**ƒê·ª´ng ng·∫ßn ng·∫°i, h√£y li√™n h·ªá ngay:**
* **ƒê∆∞·ªùng d√¢y n√≥ng Ng√†y mai:** 096.306.1414 (8h-22h)
* **T·ªïng ƒë√†i Qu·ªëc gia B·∫£o v·ªá Tr·∫ª em:** 111 (24/7)
* **C√°c d·ªãch v·ª• c·∫•p c·ª©u y t·∫ø g·∫ßn nh·∫•t.**

M√¨nh v·∫´n ·ªü ƒë√¢y n·∫øu b·∫°n mu·ªën ti·∫øp t·ª•c chia s·∫ª, nh∆∞ng h√£y ∆∞u ti√™n li√™n h·ªá h·ªó tr·ª£ chuy√™n m√¥n nh√©.
"""
ADVICE_MESSAGES = {
    "low": "B·∫°n d∆∞·ªùng nh∆∞ ƒëang g·∫∑p m·ªôt s·ªë kh√≥ khƒÉn nh·ªè. H√£y th·ª≠ th∆∞ gi√£n b·∫±ng c√°ch ƒëi d·∫°o, nghe nh·∫°c ho·∫∑c chia s·∫ª v·ªõi b·∫°n b√®. N·∫øu c·∫ßn, b·∫°n c√≥ th·ªÉ tr√≤ chuy·ªán v·ªõi chuy√™n gia qua 1900555618.",
    "medium": "B·∫°n c√≥ v·∫ª ƒëang tr·∫£i qua √°p l·ª±c t√¢m l√Ω ƒë√°ng k·ªÉ. H√£y c√¢n nh·∫Øc g·∫∑p b√°c sƒ© t√¢m l√Ω ho·∫∑c g·ªçi 1900555618 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chuy√™n s√¢u. B·∫°n kh√¥ng c√¥ ƒë∆°n ƒë√¢u!",
    "high": "C√≥ v·∫ª b·∫°n ƒëang g·∫∑p kh√≥ khƒÉn nghi√™m tr·ªçng v·ªÅ t√¢m l√Ω. M√¨nh khuy√™n b·∫°n n√™n li√™n h·ªá ngay v·ªõi chuy√™n gia qua ƒë∆∞·ªùng d√¢y n√≥ng 1900555618 ho·∫∑c g·∫∑p b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ k·ªãp th·ªùi."
}
QIDS_QUESTIONS = [
    "B·∫°n c√≥ kh√≥ ng·ªß ho·∫∑c th·ª©c gi·∫•c th∆∞·ªùng xuy√™n kh√¥ng? (0: Kh√¥ng, 3: R·∫•t nhi·ªÅu)",
    "B·∫°n ng·ªß bao l√¢u m·ªói ƒë√™m? (0: V·ª´a ƒë·ªß, 3: Qu√° √≠t/qu√° nhi·ªÅu)",
    "B·∫°n c√≥ th·ª©c gi·∫•c gi·ªØa ƒë√™m kh√¥ng? (0: Kh√¥ng, 3: Th∆∞·ªùng xuy√™n)",
    "B·∫°n c√≥ ng·ªß qu√° nhi·ªÅu kh√¥ng? (0: Kh√¥ng, 3: R·∫•t nhi·ªÅu)",
    "B·∫°n c·∫£m th·∫•y bu·ªìn b√£ th·∫ø n√†o? (0: Kh√¥ng, 3: R·∫•t bu·ªìn)",
    "Kh·∫©u v·ªã c·ªßa b·∫°n thay ƒë·ªïi ra sao? (0: B√¨nh th∆∞·ªùng, 3: Thay ƒë·ªïi l·ªõn)",
    "C√¢n n·∫∑ng c·ªßa b·∫°n c√≥ thay ƒë·ªïi kh√¥ng? (0: Kh√¥ng, 3: TƒÉng/gi·∫£m nhi·ªÅu)",
    "B·∫°n c√≥ kh√≥ t·∫≠p trung kh√¥ng? (0: Kh√¥ng, 3: R·∫•t kh√≥)",
    "B·∫°n nghƒ© v·ªÅ b·∫£n th√¢n th·∫ø n√†o? (0: T√≠ch c·ª±c, 3: Ti√™u c·ª±c)",
    "B·∫°n c√≥ suy nghƒ© v·ªÅ c√°i ch·∫øt ho·∫∑c t·ª± h·∫°i kh√¥ng? (0: Kh√¥ng, 3: Th∆∞·ªùng xuy√™n)",
    "B·∫°n c√≥ h·ª©ng th√∫ v·ªõi c√°c ho·∫°t ƒë·ªông kh√¥ng? (0: C√≥, 3: Kh√¥ng)",
    "M·ª©c nƒÉng l∆∞·ª£ng c·ªßa b·∫°n th·∫ø n√†o? (0: Cao, 3: Th·∫•p)",
    "B·∫°n c√≥ c·∫£m th·∫•y ch·∫≠m ch·∫°p kh√¥ng? (0: Kh√¥ng, 3: R·∫•t ch·∫≠m)",
    "B·∫°n c√≥ c·∫£m th·∫•y b·ªìn ch·ªìn kh√¥ng? (0: Kh√¥ng, 3: R·∫•t b·ªìn ch·ªìn)",
    "B·∫°n c√≥ kh√≥ ƒë∆∞a ra quy·∫øt ƒë·ªãnh kh√¥ng? (0: Kh√¥ng, 3: R·∫•t kh√≥)",
    "B·∫°n c√≥ c·∫£m th·∫•y t·ªôi l·ªói kh√¥ng? (0: Kh√¥ng, 3: R·∫•t nhi·ªÅu)"
]
def check_for_red_flags(text):
    """Ki·ªÉm tra xem vƒÉn b·∫£n c√≥ ch·ª©a t·ª´ kh√≥a nguy hi·ªÉm kh√¥ng."""
    return any(keyword in text.lower() for keyword in RED_FLAG_KEYWORDS)

def assess_overall_severity(history, red_flag_triggered):
    """ƒê√°nh gi√° m·ª©c ƒë·ªô t·ªïng th·ªÉ linh ho·∫°t, ∆∞u ti√™n t·ª´ kh√≥a v√† red flag."""
    user_messages = [msg for msg in history if msg.role == "user"]
    num_user_msgs = len(user_messages)
    if num_user_msgs < 5 and not red_flag_triggered:  
        return None, None
    
    severity_scores = []
    for msg in user_messages:
        text = msg.parts[0].text.lower()
        emotion = analyze_emotion(text)
        score = SEVERITY_LEVELS.get(emotion, 0)
        keyword_boost = sum(KEYWORD_BOOSTS.get(kw, 0) for kw in KEYWORD_BOOSTS if kw in text)
        score += keyword_boost
        severity_scores.append(score)
    
    # N·∫øu c√≥ red flag, tƒÉng m·ª©c nghi√™m tr·ªçng ngay l·∫≠p t·ª©c
    if red_flag_triggered:
        severity_scores.append(4.0)  # T∆∞∆°ng ƒë∆∞∆°ng "Tuy·ªát v·ªçng"
    
    # T√≠nh trung b√¨nh c√≥ tr·ªçng s·ªë
    weights = [1 + i * 0.2 for i in range(len(severity_scores))]
    weighted_avg = sum(score * weight for score, weight in zip(severity_scores, weights)) / sum(weights)
    
    # Ki·ªÉm tra streak nghi√™m tr·ªçng
    recent_scores = severity_scores[-min(5, len(severity_scores)):]
    has_severe_streak = sum(1 for s in recent_scores if s >= 3.0) >= 3 or max(recent_scores) >= 4.0
    
    if weighted_avg >= 3.0 or has_severe_streak or red_flag_triggered:
        return "high", ADVICE_MESSAGES["high"]
    elif weighted_avg >= 1.5:
        return "medium", ADVICE_MESSAGES["medium"]
    elif weighted_avg > 0:
        return "low", ADVICE_MESSAGES["low"]
    return None, None

def compute_qids_score(scores):
    """T√≠nh ƒëi·ªÉm QIDS-SR (0-27)."""
    total = sum(scores)
    if total <= 5:
        return "Kh√¥ng ho·∫∑c r·∫•t nh·∫π. H√£y ti·∫øp t·ª•c theo d√µi s·ª©c kh·ªèe t√¢m l√Ω c·ªßa b·∫°n."
    elif total <= 10:
        return "Nh·∫π. H√£y th·ª≠ c√°c ho·∫°t ƒë·ªông th∆∞ gi√£n nh∆∞ ƒëi d·∫°o, nghe nh·∫°c, ho·∫∑c chia s·∫ª v·ªõi b·∫°n b√®."
    elif total <= 15:
        return "Trung b√¨nh. H√£y c√¢n nh·∫Øc g·∫∑p chuy√™n gia t√¢m l√Ω qua 1900555618 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n th√™m."
    elif total <= 20:
        return "N·∫∑ng. M√¨nh khuy√™n b·∫°n n√™n g·∫∑p b√°c sƒ© ho·∫∑c chuy√™n gia ngay ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
    else:
        return "R·∫•t n·∫∑ng. Vui l√≤ng li√™n h·ªá chuy√™n gia ho·∫∑c ƒë∆∞·ªùng d√¢y n√≥ng 1900555618 ngay l·∫≠p t·ª©c."


SYSTEM_PROMPT = """
B·∫°n l√† "Trang Trang", tr·ª£ l√Ω ·∫£o ƒë·ªìng c·∫£m, h·ªó tr·ª£ s∆° b·ªô v·ªÅ t√¢m l√Ω. Nhi·ªám v·ª•:
1. T·∫°o kh√¥ng gian an to√†n, ƒë·ªìng c·∫£m, kh√¥ng ph√°n x√©t.
2. Tr·∫£ l·ªùi d·ª±a tr√™n b·ªëi c·∫£nh c·∫£m x√∫c, kh√¥ng l·∫∑p t√™n c·∫£m x√∫c m√°y m√≥c.
3. Linh ho·∫°t ƒë√°nh gi√° t·ªïng th·ªÉ, ch·ªâ ƒë∆∞a g·ª£i √Ω khi ƒë·ªß d·ªØ li·ªáu ho·∫∑c d·∫•u hi·ªáu nghi√™m tr·ªçng.
4. KH√îNG ch·∫©n ƒëo√°n b·ªánh. Ch·ªâ g·ª£i √Ω g·∫∑p chuy√™n gia n·∫øu m·ª©c cao.
5. N·∫øu c√≥ red flag, nh·∫•n m·∫°nh h·ªó tr·ª£ chuy√™n m√¥n nh∆∞ng cho ph√©p ti·∫øp t·ª•c tr√≤ chuy·ªán.
6. Trong ch·∫ø ƒë·ªô kh·∫£o s√°t QIDS, ch·ªâ h·ªèi c√¢u h·ªèi v√† parse ƒëi·ªÉm (0-3), kh√¥ng tr√≤ chuy·ªán kh√°c.
7. Ch·ªâ tr·∫£ l·ªùi li√™n quan ƒë·∫øn tin nh·∫Øn, KH√îNG ti·∫øt l·ªô b·ªëi c·∫£nh n·ªôi b·ªô.
8. T√≠ch h·ª£p g·ª£i √Ω kh√©o l√©o khi c√≥ ƒë√°nh gi√°, v√≠ d·ª•: "C√≥ v·∫ª b·∫°n ƒëang g·∫∑p kh√≥, h√£y th·ª≠ g·∫∑p chuy√™n gia nh√©."

Ng√¥n ng·ªØ nh·∫π nh√†ng, ph√π h·ª£p vƒÉn h√≥a Vi·ªát Nam.
"""
model = genai.GenerativeModel(
    model_name="gemini-2.5-flash-latest", #c√≥ th·ªÉ thay m√¥ h√¨nh kh√°c t√πy theo √Ω b·∫°n
    system_instruction=SYSTEM_PROMPT
)

# --- GIAO DI·ªÜN ·ª®NG D·ª§NG STREAMLIT ---
st.set_page_config(layout="centered", page_title="Chatbot Tr√≤ chuy·ªán", page_icon = "üåï")
with st.sidebar.expander("‚ÑπÔ∏è Th√¥ng tin chung", expanded=False):
    st.markdown("### Th√¥ng tin chung")
    st.write("""
    Chatbot "Trang Trang" l√† m·ªôt d·ª± √°n c√° nh√¢n ƒë∆∞·ª£c ph√°t tri·ªÉn nh·∫±m h·ªó tr·ª£ s∆° b·ªô v·ªÅ t√¢m l√Ω, s·ª≠ d·ª•ng c√°c c√¥ng ngh·ªá AI bao g·ªìm 
    m√¥ h√¨nh PhoBERT v√† API Google Generative AI. M·ª•c ti√™u c·ªßa chatbot l√† cung c·∫•p kh√¥ng gian an to√†n ƒë·ªÉ ng∆∞·ªùi d√πng chia s·∫ª 
    c·∫£m x√∫c v√† nh·∫≠n g·ª£i √Ω c∆° b·∫£n. ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng th·ª≠ nghi·ªám v√† kh√¥ng thay th·∫ø d·ªãch v·ª• t∆∞ v·∫•n chuy√™n m√¥n t·ª´ c√°c chuy√™n gia 
    t√¢m l√Ω ho·∫∑c b√°c sƒ©.
    """)
    
    st.markdown("---")
    st.write("**Phi√™n b·∫£n hi·ªán t·∫°i:** 1.0")
    st.write("**Nh√† ph√°t tri·ªÉn:** V√µ Nguy·ªÖn Th√°i H·ªçc")
    st.write("**Li√™n h·ªá:** Vonguyenthaihocilt260@gmail.com")
    st.write("**Ngu·ªìn m·ªü:** D·ª± √°n ƒë∆∞·ª£c l∆∞u tr·ªØ t·∫°i GitHub ·ªü m·ª•c Li√™n k·∫øt.")
    
    st.markdown("---")
    st.markdown("### Th√¥ng B√°o Ph√°p L√Ω")
    st.write("""
    Chatbot "Trang Trang" ƒë∆∞·ª£c ph√°t tri·ªÉn nh∆∞ m·ªôt d·ª± √°n c√° nh√¢n v√† ch·ªâ mang t√≠nh ch·∫•t th√¥ng tin, th·ª≠ nghi·ªám. C√°c ph·∫£n h·ªìi t·ª´ chatbot 
    c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c, kh√¥ng ƒë·∫ßy ƒë·ªß ho·∫∑c ch·ª©a thi√™n ki·∫øn. Ng∆∞·ªùi d√πng ch·ªãu tr√°ch nhi·ªám ho√†n to√†n cho b·∫•t k·ª≥ quy·∫øt ƒë·ªãnh ho·∫∑c 
    h√†nh ƒë·ªông n√†o d·ª±a tr√™n c√°c ph·∫£n h·ªìi n√†y v√† n√™n th·ª±c hi·ªán v·ªõi s·ª± gi√°m s√°t c·ªßa con ng∆∞·ªùi ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n v√† ph√π h·ª£p.

    Ng∆∞·ªùi t·∫°o kh√¥ng ch·ªãu tr√°ch nhi·ªám v·ªÅ b·∫•t k·ª≥ thi·ªát h·∫°i, m·∫•t m√°t ho·∫∑c h·∫≠u qu·∫£ n√†o ph√°t sinh t·ª´ vi·ªác s·ª≠ d·ª•ng chatbot. Ng∆∞·ªùi d√πng kh√¥ng n√™n nh·∫≠p d·ªØ li·ªáu c√° nh√¢n, nh·∫°y c·∫£m ho·∫∑c ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh (v√≠ d·ª•: th√¥ng tin s·ª©c kh·ªèe, t√†i ch√≠nh) v√†o h·ªá th·ªëng. B·∫±ng c√°ch s·ª≠ 
    d·ª•ng chatbot, b·∫°n ƒë·ªìng √Ω r·∫±ng c√°c ƒë·∫ßu v√†o v√† ph·∫£n h·ªìi c√≥ th·ªÉ ƒë∆∞·ª£c ghi l·∫°i ƒë·ªÉ c·∫£i thi·ªán h·ªá th·ªëng, 
    tu√¢n th·ªß c√°c quy ƒë·ªãnh ph√°p lu·∫≠t hi·ªán h√†nh.

    D·ª± √°n n√†y kh√¥ng li√™n k·∫øt ho·∫∑c ƒë∆∞·ª£c x√°c nh·∫≠n b·ªüi b·∫•t k·ª≥ t·ªï ch·ª©c th∆∞∆°ng m·∫°i ho·∫∑c nh√† cung c·∫•p API b√™n th·ª© ba n√†o.
    """)

    st.markdown("---")
    st.markdown("### B·∫£n Quy·ªÅn")
    st.write("""
    ¬© 2025 HocVoNgThai. All rights reserved.
    N·ªôi dung, m√£ ngu·ªìn v√† t√†i li·ªáu li√™n quan ƒë·∫øn chatbot "Trang Trang" ƒë∆∞·ª£c s·ªü d·ª•ng cho m·ª•c ƒë√≠ch h·ªçc t·∫≠p v√† nghi√™n c·ª©u v·ªõi ƒëi·ªÅu ki·ªán tr√≠ch d·∫´n ngu·ªìn g·ªëc. 
    Mong c√°c b·∫°n kh√¥ng t·ª± √Ω sao ch√©p, ph√¢n ph·ªëi ho·∫∑c s·ª≠ d·ª•ng l·∫°i cho m·ª•c ƒë√≠ch th∆∞∆°ng m·∫°i.
    """)
    
    st.markdown("---")
    st.markdown("### Li√™n K·∫øt H·ªØu √çch")
    linkedin_icon = "https://content.linkedin.com/content/dam/me/business/en-us/amp/brand-site/v2/bg/LI-Bug.svg.original.svg"
    facebook_icon = "https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/facebook.svg"
    github_icon = "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
    mail_icon = "https://github.com/user-attachments/assets/70e22fce-05b9-40c3-a30c-77abb5491751"

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown(
            f'<a href="https://linkedin.com/in/th1126/" target="_blank"><img src="{linkedin_icon}" width="40"></a>',
            unsafe_allow_html=True
        )
    with col2:
        st.markdown(
            f'<a href="https://facebook.com/th1126/" target="_blank"><img src="{facebook_icon}" width="40"></a>',
            unsafe_allow_html=True
        )
    with col3:
        st.markdown(
            f'<a href="https://github.com/HocVoNgThai/Vietnamese-Stress-Detector-Chatbot.git" target="_blank"><img src="{github_icon}" width="40"></a>',
            unsafe_allow_html=True
        )
    with col4:
        st.markdown(
            f'<a href="mailto:vonguyenthaihocilt260@gmail.com" target="_blank"><img src="{mail_icon}" width="40"></a>',
            unsafe_allow_html=True
        )


st.title("Tr√≤ chuy·ªán c√πng Trang Trang üåï")
st.write("M√¨nh t√™n l√† Trang Trang. H√£y chia s·∫ª b·∫•t c·ª© ƒëi·ªÅu g√¨ b·∫°n ƒëang nghƒ© v·ªõi m√¨nh nh√©. M√¨nh lu√¥n s·∫µn l√≤ng l·∫Øng nghe c√¢u chuy·ªán c·ªßa b·∫°n v√† c√πng b·∫°n v∆∞·ª£t qua nh·ªØng kh√≥ khƒÉn n√® ‚ù§Ô∏è.")
st.markdown("---")

# Kh·ªüi t·∫°o tr·∫°ng th√°i
if "chat_session" not in st.session_state:
    st.session_state.chat_session = model.start_chat(history=[])
if "survey_mode" not in st.session_state:
    st.session_state.survey_mode = False
if "current_question" not in st.session_state:
    st.session_state.current_question = 0
if "qids_scores" not in st.session_state:
    st.session_state.qids_scores = []
if "survey_prompted" not in st.session_state:
    st.session_state.survey_prompted = False
if "red_flag_triggered" not in st.session_state:
    st.session_state.red_flag_triggered = False

# Hi·ªÉn th·ªã c√°c tin nh·∫Øn c≈©
for message in st.session_state.chat_session.history:
    if message.role != "system":
        with st.chat_message(name="user" if message.role == "user" else "assistant"):
            st.markdown(message.parts[0].text)

# √î nh·∫≠p li·ªáu v√† x·ª≠ l√Ω logic
if user_prompt := st.chat_input("B·∫°n ƒëang c·∫£m th·∫•y th·∫ø n√†o?"):
    st.chat_message("user").markdown(user_prompt)

    # Ki·ªÉm tra t·ª´ kh√≥a nguy hi·ªÉm
    if check_for_red_flags(user_prompt):
        st.session_state.red_flag_triggered = True
        st.chat_message("assistant").error(EMERGENCY_MESSAGE)
    
    # Ph√¢n t√≠ch c·∫£m x√∫c t·ª´ng l∆∞·ª£t
    emotion_result = analyze_emotion(user_prompt)
    st.sidebar.info(f"Ph√¢n t√≠ch c·∫£m x√∫c l∆∞·ª£t n√†y: **{emotion_result}**")

    # ƒê√°nh gi√° t·ªïng th·ªÉ linh ho·∫°t
    overall_severity, overall_advice = assess_overall_severity(
        st.session_state.chat_session.history,
        st.session_state.red_flag_triggered
    )
    if overall_severity:
        st.sidebar.warning(f"ƒê√°nh gi√° s∆° b·ªô t·ªïng th·ªÉ: M·ª©c {overall_severity.upper()}")

    # X·ª≠ l√Ω kh·∫£o s√°t QIDS n·∫øu ƒëang ·ªü mode kh·∫£o s√°t
    if st.session_state.survey_mode:
        # Parse ƒëi·ªÉm t·ª´ ph·∫£n h·ªìi (d√πng regex ƒë·ªÉ t√¨m s·ªë 0-3)
        match = re.search(r'\b[0-3]\b', user_prompt)
        score = int(match.group()) if match else 0
        st.session_state.qids_scores.append(score)
        
        # H·ªèi c√¢u ti·∫øp theo ho·∫∑c k·∫øt th√∫c kh·∫£o s√°t
        st.session_state.current_question += 1
        if st.session_state.current_question < len(QIDS_QUESTIONS):
            next_question = QIDS_QUESTIONS[st.session_state.current_question]
            st.chat_message("assistant").markdown(next_question)
        else:
            qids_result = compute_qids_score(st.session_state.qids_scores)
            st.chat_message("assistant").markdown(f"D·ª±a tr√™n kh·∫£o s√°t, ƒë√°nh gi√° s∆° b·ªô: {qids_result}")
            st.session_state.survey_mode = False
            st.session_state.qids_scores = []
            st.session_state.current_question = 0
            st.session_state.survey_prompted = False
        st.stop() 

    # G·ª£i √Ω kh·∫£o s√°t n·∫øu ƒë·ªß l∆∞·ª£t ho·∫∑c c√≥ red flag
    user_messages_count = len([m for m in st.session_state.chat_session.history if m.role == "user"])
    if (user_messages_count >= 10 or st.session_state.red_flag_triggered) and not st.session_state.survey_prompted and not st.session_state.survey_mode:
        st.session_state.survey_prompted = True
        survey_prompt = "D·ª±a tr√™n cu·ªôc tr√≤ chuy·ªán, m√¨nh th·∫•y c√≥ th·ªÉ b·∫°n ƒëang g·∫∑p m·ªôt s·ªë kh√≥ khƒÉn. B·∫°n c√≥ mu·ªën l√†m m·ªôt kh·∫£o s√°t ng·∫Øn (16 c√¢u) ƒë·ªÉ ƒë√°nh gi√° s∆° b·ªô s·ª©c kh·ªèe t√¢m l√Ω kh√¥ng? (C√≥/Kh√¥ng)"
        st.chat_message("assistant").markdown(survey_prompt)
        st.stop()

    # Ki·ªÉm tra ph·∫£n h·ªìi kh·∫£o s√°t
    if st.session_state.survey_prompted and not st.session_state.survey_mode:
        if "c√≥" in user_prompt.lower() or "yes" in user_prompt.lower():
            st.session_state.survey_mode = True
            first_question = QIDS_QUESTIONS[0]
            st.chat_message("assistant").markdown("C·∫£m ∆°n b·∫°n! B·∫Øt ƒë·∫ßu kh·∫£o s√°t nh√©. Tr·∫£ l·ªùi theo m·ª©c ƒë·ªô 0-3. " + first_question)
            st.stop()
        else:
            st.session_state.survey_prompted = False

    # T·∫°o prompt cho Gemini
    enhanced_prompt = f"""
    [B·ªëi c·∫£nh ph√¢n t√≠ch n·ªôi b·ªô: C·∫£m x√∫c l∆∞·ª£t n√†y l√† '{emotion_result}'. 
    ƒê√°nh gi√° t·ªïng th·ªÉ: M·ª©c '{overall_severity or "Ch∆∞a ƒë√°nh gi√°"}'. 
    Red flag: {st.session_state.red_flag_triggered}. 
    N·∫øu c√≥ ƒë√°nh gi√° t·ªïng th·ªÉ ho·∫∑c red flag, t√≠ch h·ª£p g·ª£i √Ω sau v√†o ph·∫£n h·ªìi kh√©o l√©o: '{overall_advice or "Ch∆∞a c√≥ g·ª£i √Ω"}'. 
    KH√îNG l·∫∑p l·∫°i b·ªëi c·∫£nh n·ªôi b·ªô.]

    Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng: "{user_prompt}"
    """
    
    # G·ª≠i tin nh·∫Øn ƒë·∫øn Gemini
    with st.spinner("Trang Trang ƒëang l·∫Øng nghe..."):
        response = st.session_state.chat_session.send_message(enhanced_prompt)
        st.chat_message("assistant").markdown(response.text)